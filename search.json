[{"path":"https://jvfe.github.io/go2cell/articles/go2cell_vignette.html","id":"go2cell","dir":"Articles","previous_headings":"","what":"go2cell","title":"Introduction to go2cell","text":"go2cell R package goal link Gene Ontology information cell types via marker genes said cell types, harnessing strengths open linked data Wikidata. get started go2cell, first need load package: , purposes showcase, ’ll using small test dataset GO IDs come package, called go2cell_test_data. Now, can see 10 Gene Ontology identifiers, related processes protein metabolism glucose homeostasis. Let’s see cell types can matched identifiers. can see results cell types associated identifiers , showing cell types human myoblast, along Wikidata Item identifier (QID), Q101404940. results, can see marker genes cell types led conclusion, FGFR4, linked human myoblast protein phosphorylation (GO:0006468). Now, suppose want reverse process. Say interested seeing GO IDs associated marker genes cell type Q101405206, human neuroendocrine cell. can get information using ‘cell2go’ function: now ’ve retrieved marker genes human neuroendocrine cell type GO identifiers associated said genes. ’s ! sum , can use go2cell link cell types GO IDs via one two simple functions, depending type information want acquire.","code":"library(go2cell) head(go2cell_test_data) #>      gene                                                   process       goid #> 1    FASN                                                metabolism GO:0008152 #> 2   APBA2                                         protein transport GO:0015031 #> 3     SHH                        striated muscle tissue development GO:0014706 #> 4 SELENON positive regulation of skeletal muscle cell proliferation GO:0014858 #> 5    EDN1           positive regulation of mitotic nuclear division GO:0045840 #> 6   BIRC5                                   protein phosphorylation GO:0006468 # The function accepts a vector of GO IDs results <- go2cell(go2cell_test_data$goid) #> Rows: 978 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (5): cell_type, cell_typeLabel, go_ids, go_termLabel, geneLabel #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(results) #> # A tibble: 6 × 5 #>   cell_type     cell_typeLabel           go_ids     go_termLabel geneLabel #>   <chr>         <chr>                    <chr>      <chr>        <chr>     #> 1 wd:Q71292398  human oligodendrocyte    GO:0008152 metabolism   FASN      #> 2 wd:Q105533311 human adipocyte  (heart) GO:0008152 metabolism   FASN      #> 3 wd:Q68620794  human hepatocyte         GO:0008152 metabolism   PAH       #> 4 wd:Q68620794  human hepatocyte         GO:0008152 metabolism   GCK       #> 5 wd:Q101404894 human melanocyte         GO:0008152 metabolism   TYR       #> 6 wd:Q101404913 human purkinje neuron    GO:0008152 metabolism   PDE5A # Now we use the Wikidata identifier human_neuroendocrine_cell <- cell2go(\"Q101405206\") #> Rows: 744 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (5): cell_type, cell_typeLabel, go_ids, go_termLabel, geneLabel #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(human_neuroendocrine_cell) #> # A tibble: 6 × 5 #>   cell_type     cell_typeLabel            go_ids     go_termLabel      geneLabel #>   <chr>         <chr>                     <chr>      <chr>             <chr>     #> 1 wd:Q101405206 human neuroendocrine cell GO:0005515 protein binding   PENK      #> 2 wd:Q101405206 human neuroendocrine cell GO:0005515 protein binding   FXYD7     #> 3 wd:Q101405206 human neuroendocrine cell GO:0005515 protein binding   NEGR1     #> 4 wd:Q101405206 human neuroendocrine cell GO:0005515 protein binding   CCK       #> 5 wd:Q101405206 human neuroendocrine cell GO:0046872 metal ion binding DPF1      #> 6 wd:Q101405206 human neuroendocrine cell GO:0008236 serine-type pept… PRSS12"},{"path":"https://jvfe.github.io/go2cell/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"João Vitor F. Cavalcante. Author, maintainer. Tiago Lubiana. Author, data contributor.","code":""},{"path":"https://jvfe.github.io/go2cell/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"F. Cavalcante J, Lubiana T (2023). go2cell: Get Cell Types Related Gene Ontology IDs. R package version 0.99.0.","code":"@Manual{,   title = {go2cell: Get Cell Types Related to Gene Ontology IDs},   author = {João Vitor {F. Cavalcante} and Tiago Lubiana},   year = {2023},   note = {R package version 0.99.0}, }"},{"path":"https://jvfe.github.io/go2cell/index.html","id":"go2cell","dir":"","previous_headings":"","what":"Get Cell Types Related to Gene Ontology IDs","title":"Get Cell Types Related to Gene Ontology IDs","text":"using Wikidata, go2cell links Gene Ontology terms cell types, therefore enriching Omics results open semantic knowledge.","code":""},{"path":"https://jvfe.github.io/go2cell/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Get Cell Types Related to Gene Ontology IDs","text":"can install latest version go2cell GitHub :","code":"install.packages(\"remotes\") remotes::install_github(\"jvfe/go2cell\")"},{"path":"https://jvfe.github.io/go2cell/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"Get Cell Types Related to Gene Ontology IDs","text":"Suppose want retrieve cell types gene markers related GO terms ‘muscle contraction’ ‘glycoprotein metabolic process’:","code":"library(go2cell)  go_ids <- c(\"GO:0006936\", \"GO:0009100\")  results <- go2cell(go_ids)"},{"path":"https://jvfe.github.io/go2cell/reference/cell2go.html","id":null,"dir":"Reference","previous_headings":"","what":"Get GO ids from cell types — cell2go","title":"Get GO ids from cell types — cell2go","text":"Return GO identifiers related gene markers specific cell types.","code":""},{"path":"https://jvfe.github.io/go2cell/reference/cell2go.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get GO ids from cell types — cell2go","text":"","code":"cell2go(celltype_qids)"},{"path":"https://jvfe.github.io/go2cell/reference/cell2go.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get GO ids from cell types — cell2go","text":"celltype_qids character vector cell type Wikidata IDs","code":""},{"path":"https://jvfe.github.io/go2cell/reference/cell2go.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get GO ids from cell types — cell2go","text":"dataframe 5 columns: first two correspond cell types,    , Wikidata Identifier name. two following    columns correspond Gene Ontology IDs given, last column    corresponds cell type's marker led result.","code":""},{"path":"https://jvfe.github.io/go2cell/reference/cell2go.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get GO ids from cell types — cell2go","text":"function takes character vector cell type Q identifiers (QIDs), queries Wikidata (https://www.wikidata.org/) local RDF database return GO IDs related gene markers cell types.","code":""},{"path":[]},{"path":"https://jvfe.github.io/go2cell/reference/cell2go.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get GO ids from cell types — cell2go","text":"","code":"# Return GO IDs related to cell type # 'human smooth muscle cell' cell2go(\"Q101404901\") #> Rows: 2001 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (5): cell_type, cell_typeLabel, go_ids, go_termLabel, geneLabel #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. if (FALSE) { # IDs should always start with 'Q' go2cell(\"101404901\") }"},{"path":"https://jvfe.github.io/go2cell/reference/dot-collapse_as_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Format string or character vector as SPARQL-compatible list — .collapse_as_values","title":"Format string or character vector as SPARQL-compatible list — .collapse_as_values","text":"Format string character vector SPARQL-compatible list","code":""},{"path":"https://jvfe.github.io/go2cell/reference/dot-collapse_as_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format string or character vector as SPARQL-compatible list — .collapse_as_values","text":"","code":".collapse_as_values(item_vector, quotes = FALSE)"},{"path":"https://jvfe.github.io/go2cell/reference/dot-collapse_as_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format string or character vector as SPARQL-compatible list — .collapse_as_values","text":"item_vector string character vector items quotes logical indicate whether encase quotes","code":""},{"path":"https://jvfe.github.io/go2cell/reference/dot-collapse_as_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format string or character vector as SPARQL-compatible list — .collapse_as_values","text":"SPARQL-compatible string values","code":""},{"path":"https://jvfe.github.io/go2cell/reference/dot-get_species_item.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the item for a particular species — .get_species_item","title":"Return the item for a particular species — .get_species_item","text":"Return item particular species","code":""},{"path":"https://jvfe.github.io/go2cell/reference/dot-get_species_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the item for a particular species — .get_species_item","text":"","code":".get_species_item(species_name)"},{"path":"https://jvfe.github.io/go2cell/reference/dot-get_species_item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the item for a particular species — .get_species_item","text":"species_name scientific name species","code":""},{"path":"https://jvfe.github.io/go2cell/reference/dot-get_species_item.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the item for a particular species — .get_species_item","text":"Wikidata item said species","code":""},{"path":"https://jvfe.github.io/go2cell/reference/dot-remove_wdt_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Substitute the wikidata url for a SPARQL-friendly wd: — .remove_wdt_url","title":"Substitute the wikidata url for a SPARQL-friendly wd: — .remove_wdt_url","text":"Substitute wikidata url SPARQL-friendly wd:","code":""},{"path":"https://jvfe.github.io/go2cell/reference/dot-remove_wdt_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substitute the wikidata url for a SPARQL-friendly wd: — .remove_wdt_url","text":"","code":".remove_wdt_url(column)"},{"path":"https://jvfe.github.io/go2cell/reference/dot-remove_wdt_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substitute the wikidata url for a SPARQL-friendly wd: — .remove_wdt_url","text":"column column dataframe substitute","code":""},{"path":"https://jvfe.github.io/go2cell/reference/dot-remove_wdt_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substitute the wikidata url for a SPARQL-friendly wd: — .remove_wdt_url","text":"character vector","code":""},{"path":"https://jvfe.github.io/go2cell/reference/go2cell.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cell types from GO ids — go2cell","title":"Get cell types from GO ids — go2cell","text":"Return cell type information specific Gene Ontology identifiers","code":""},{"path":"https://jvfe.github.io/go2cell/reference/go2cell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cell types from GO ids — go2cell","text":"","code":"go2cell(go_ids, species = \"Homo sapiens\")"},{"path":"https://jvfe.github.io/go2cell/reference/go2cell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cell types from GO ids — go2cell","text":"go_ids character vector Gene Ontology identifiers. species character species, can either Homo sapiens (default) Mus musculus.","code":""},{"path":"https://jvfe.github.io/go2cell/reference/go2cell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cell types from GO ids — go2cell","text":"dataframe 5 columns: first two correspond cell types,    , Wikidata Identifier name. two following    columns correspond Gene Ontology IDs given, last column    corresponds cell type's marker led result.","code":""},{"path":"https://jvfe.github.io/go2cell/reference/go2cell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get cell types from GO ids — go2cell","text":"function takes character vector Gene Ontology (GO) identifiers, queries Wikidata (https://www.wikidata.org/) genes related said identifiers, crosses data local RDF database cell type-marker correspondence, returning, last, dataframe cell type information related given GO identifiers.","code":""},{"path":[]},{"path":"https://jvfe.github.io/go2cell/reference/go2cell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cell types from GO ids — go2cell","text":"","code":"# Return cell types related to 'muscle contraction' and 'metabolism' go2cell(c(\"GO:0006936\", \"GO:0008152\")) #> Rows: 354 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (5): cell_type, cell_typeLabel, go_ids, go_termLabel, geneLabel #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  # Return cell types related to 'response to zinc ion' go2cell(\"GO:0010043\") #> Rows: 79 Columns: 5 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (5): cell_type, cell_typeLabel, go_ids, go_termLabel, geneLabel #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. if (FALSE) { # IDs should use ':' not '_' go2cell(\"GO_0010043\") }"},{"path":"https://jvfe.github.io/go2cell/reference/go2cell_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"A dataframe of Gene symbols and GO IDs — go2cell_test_data","title":"A dataframe of Gene symbols and GO IDs — go2cell_test_data","text":"Small dataset testing showcase purposes.","code":""},{"path":"https://jvfe.github.io/go2cell/reference/go2cell_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A dataframe of Gene symbols and GO IDs — go2cell_test_data","text":"","code":"go2cell_test_data"},{"path":"https://jvfe.github.io/go2cell/reference/go2cell_test_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A dataframe of Gene symbols and GO IDs — go2cell_test_data","text":"dataframe 3 columns, corresponding    gene name, go ID process term go ID    .","code":""},{"path":"https://jvfe.github.io/go2cell/reference/go2cell_test_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A dataframe of Gene symbols and GO IDs — go2cell_test_data","text":"João Vitor F Cavalcante","code":""},{"path":"https://jvfe.github.io/go2cell/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://jvfe.github.io/go2cell/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://jvfe.github.io/go2cell/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://jvfe.github.io/go2cell/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://jvfe.github.io/go2cell/news/index.html","id":"go2cell-0990","dir":"Changelog","previous_headings":"","what":"go2cell 0.99.0","title":"go2cell 0.99.0","text":"Added basic function logic, well tests documentation.","code":""}]
